{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom } from \"./Constants.types\";\nimport ExponentConstants from \"./ExponentConstants\";\nexport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom };\n\nif (!ExponentConstants) {\n  console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");\n}\n\nvar manifest = null;\n\nif (NativeModulesProxy.ExpoUpdates) {\n  var updatesManifest;\n\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    manifest = updatesManifest;\n  }\n}\n\nif (NativeModules.EXDevLauncher) {\n  var devLauncherManifest;\n\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    manifest = devLauncherManifest;\n  }\n}\n\nif (!manifest && ExponentConstants && ExponentConstants.manifest) {\n  manifest = ExponentConstants.manifest;\n\n  if (typeof manifest === 'string') {\n    manifest = JSON.parse(manifest);\n  }\n}\n\nvar _ref = ExponentConstants || {},\n    name = _ref.name,\n    appOwnership = _ref.appOwnership,\n    nativeConstants = _objectWithoutProperties(_ref, [\"name\", \"appOwnership\"]);\n\nvar warnedAboutInstallationId = false;\nvar warnedAboutDeviceId = false;\nvar warnedAboutLinkingUrl = false;\n\nvar constants = _objectSpread(_objectSpread({}, nativeConstants), {}, {\n  appOwnership: appOwnership != null ? appOwnership : null,\n\n  get installationId() {\n    if (!warnedAboutInstallationId) {\n      console.warn(\"Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.\");\n      warnedAboutInstallationId = true;\n    }\n\n    return nativeConstants.installationId;\n  },\n\n  get deviceId() {\n    if (!warnedAboutDeviceId) {\n      console.warn(\"Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.\");\n      warnedAboutDeviceId = true;\n    }\n\n    return nativeConstants.installationId;\n  },\n\n  get linkingUrl() {\n    if (!warnedAboutLinkingUrl) {\n      console.warn(\"Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.\");\n      warnedAboutLinkingUrl = true;\n    }\n\n    return nativeConstants.linkingUri;\n  }\n\n});\n\nfunction getManifest() {\n  var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  if (!manifest) {\n    var invalidManifestType = manifest === null ? 'null' : 'undefined';\n\n    if (nativeConstants.executionEnvironment === ExecutionEnvironment.Bare && Platform.OS !== 'web') {\n      if (!suppressWarning) {\n        console.warn(\"Constants.manifest is \" + invalidManifestType + \" because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.\");\n      }\n    } else if (nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone) {\n      throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', \"Constants.manifest is \" + invalidManifestType + \", must be an object.\");\n    }\n  }\n\n  return manifest;\n}\n\nObject.defineProperties(constants, {\n  manifest: {\n    enumerable: true,\n    get: function get() {\n      return getManifest();\n    },\n    set: function set(value) {\n      manifest = value;\n    }\n  },\n  __unsafeNoWarnManifest: {\n    enumerable: true,\n    get: function get() {\n      return getManifest(true);\n    }\n  }\n});\nexport default constants;","map":{"version":3,"sources":["../src/Constants.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet manifest = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    manifest = updatesManifest;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    manifest = devLauncherManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!manifest && ExponentConstants && ExponentConstants.manifest) {\n  manifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof manifest === 'string') {\n    manifest = JSON.parse(manifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nlet warnedAboutInstallationId = false;\nlet warnedAboutDeviceId = false;\nlet warnedAboutLinkingUrl = false;\n\nconst constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n  // Deprecated fields\n  get installationId() {\n    if (!warnedAboutInstallationId) {\n      console.warn(\n        `Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.`\n      );\n      warnedAboutInstallationId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  // Legacy aliases\n  get deviceId() {\n    if (!warnedAboutDeviceId) {\n      console.warn(\n        `Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.`\n      );\n      warnedAboutDeviceId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  get linkingUrl() {\n    if (!warnedAboutLinkingUrl) {\n      console.warn(\n        `Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.`\n      );\n      warnedAboutLinkingUrl = true;\n    }\n    return nativeConstants.linkingUri;\n  },\n} as Constants;\n\nfunction getManifest(suppressWarning = false) {\n  if (!manifest) {\n    const invalidManifestType = manifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return manifest;\n}\n\nObject.defineProperties(constants, {\n  manifest: {\n    enumerable: true,\n    get() {\n      return getManifest();\n    },\n    // This setter is only useful to mock the value for tests\n    set(value) {\n      manifest = value;\n    },\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest: {\n    enumerable: true,\n    get() {\n      return getManifest(true);\n    },\n  },\n});\n\nexport default constants as Constants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}